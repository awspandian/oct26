pipeline {
    agent any

    stages {
        stage('SCM') {
            steps {
                git branch: 'war', url: 'https://github.com/awspandian/oct26.git'
            }
        }
	stage('BUILD') {
            steps {
                sh 'mvn clean'
		        sh 'mvn install'
            }
        }
	stage('Docker Build') {
	  steps{
		script{
		app = docker.build("dockerpandian/nov")
		app.inside{
			sh 'echo $(curl localhost:8080)'
				}		

		}
			}
		    }

	stage('Push Docker Image') {
	  steps {
		script{
		    docker.withRegistry('https://registry.hub.docker.com', 'dd'){
			app.push("${env.BUILD_NUMBER}")
			app.push("latest")
										}	
			}

					}
		}

	stage('Deploy to Production') {
	 steps{
 withCredentials([usernamePassword(credentialsId: 'ds', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
           script {
              sh "sshpass -p '$USERPASS' -v ssh -o StrictHostKeyChecking=no $USERNAME@$prod_ip \"docker pull dockerpandian/nov:${env.BUILD_NUMBER}\""
               try {
                sh "sshpass -p '$USERPASS' -v ssh -o StrictHostKeyChecking=no $USERNAME@$prod_ip \"docker stop azcs\""
                sh "sshpass -p '$USERPASS' -v ssh -o StrictHostKeyChecking=no $USERNAME@$prod_ip \"docker rm azcs\""
                } catch (err) {
                    echo: 'caught error: $err'
                 }
          sh "sshpass -p '$USERPASS' -v ssh -o StrictHostKeyChecking=no $USERNAME@$prod_ip \"docker run --restart always --name azcs -p 8080:8080 -d dockerpandian/nov:${env.BUILD_NUMBER}\""
					}		
			}

								}
}    
}
}
